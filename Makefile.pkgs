
PKG_MAINTAINER = 'Jan Tobias Muehlberg <jantobias.muehlberg@cs.kuleuven.be>'


ifeq ($(UNAME_M),armv7l)
# Default checkinstall is buggy:
# https://github.com/giuliomoro/checkinstall/commit/57ad1473bdfc5aadd2c921d6990e069809f442d4
CHECKINSTALL = /usr/local/sbin/checkinstall
else
CHECKINSTALL = checkinstall
endif


# ---------------------------------------------------------------------------
TI_MSPGCC_VER     = 6.4.0.32
TI_MSPGCC_SRC_DIR = msp430-gcc-$(TI_MSPGCC_VER)_source-full
TI_MSPGCC_SRC_TBZ = $(TI_MSPGCC_SRC_DIR).tar.bz2
TI_MSPGCC_PREFIX  = /usr/local

$(TI_MSPGCC_SRC_TBZ):
	$(WGET) http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/latest/exports/$(TI_MSPGCC_SRC_TBZ)

ti-mspgcc-src: $(TI_MSPGCC_SRC_TBZ)
	bunzip2 -c $(TI_MSPGCC_SRC_TBZ) | tar -x

ti-mspgcc-build:
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  ./configure --target=msp430-elf \
	    --enable-languages=c,c++ --disable-nls \
	    --prefix=$(TI_MSPGCC_PREFIX) \
	    --disable-sim --disable-gdb --disable-werror
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  $(MAKE)

ti-mspgcc-deb:
	$(SUDO) mkdir -p $(TI_MSPGCC_PREFIX)/msp430-elf/lib
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  echo "TI MSP430-GCC binutils for Sancus." >description-pak && \
	  $(CHECKINSTALL) -y -D --install=no --backup=no \
	  --pkgname=ti-mspgcc-binutils-sancus --pkgversion=$(TI_MSPGCC_VER) \
	  --pkgrelease=1 \
	  --pkgsource="http://www.ti.com/tool/msp430-gcc-opensource" \
	  --provides=ti-mspgcc-binutils-sancus \
	  --maintainer=$(PKG_MAINTAINER) \
	  --reset-uids --pakdir=../../ --exclude=/home \
	  --deldoc --deldesc --delspec

ti-mspgcc-inst:
	$(SUDO) mkdir -p $(TI_MSPGCC_PREFIX)/msp430-elf/lib
	cd $(TI_MSPGCC_SRC_DIR)/binutils && \
	  $(SUDO) $(MAKE) install

# ---------------------------------------------------------------------------
# Optionally patch LLVM/Clang from source
clang_patch: clang.patch
	git submodule init
	git submodule update
	cd clang && \
	  patch -p1 < ../clang.patch
	touch clang_patch

clang_unpatch: clang_patch
	cd clang && \
	  patch -p1 -R < ../clang.patch
	rm -f clang_patch

LLVM_BUILD_FLAGS =  -DLLVM_TARGETS_TO_BUILD="host;MSP430" \
		    -DLLVM_TARGET_ARCH=host \
                    -DCMAKE_INSTALL_PREFIX=$(SANCUS_INSTALL_PREFIX)

ifeq ($(UNAME_M),armv7l)
# This is meant to work for raspbian/debian Stretch; Release buid saves us
# a lot of memory during compilation.
LLVM_BUILD_FLAGS += -DCMAKE_BUILD_TYPE=Release
endif


llvm-build: clang_patch
	$(info .. Building and installing patched LLVM/Clang to $(SANCUS_INSTALL_PREFIX))
ifeq ($(UNAME_M),armv7l)
	$(info .. Building LLVM/Clang on/for $(UNAME_M): use 2GiB swap and ld.gold)
endif
	mkdir -p llvm/build
	cd llvm/tools && ln -sf ../../clang clang
	cd llvm/build && cmake $(LLVM_BUILD_FLAGS) ..
	cd llvm/build && $(MAKE) -j 2

llvm-deb: llvm-build
	$(info .. Building .deb of patched LLVM/Clang to $(SANCUS_INSTALL_PREFIX))
	cd llvm/build/ && \
	  echo "Clang with Sancus patches." >description-pak && \
	  $(CHECKINSTALL) -y -D --install=no --backup=no \
	  --pkgname=clang-sancus --pkgversion=4.0.1 \
	  --pkgrelease=2 \
	  --pkgsource="https://distrinet.cs.kuleuven.be/software/sancus/" \
	  --provides=clang-sancus \
	  --maintainer=$(PKG_MAINTAINER) \
	  --reset-uids --pakdir=../../ --exclude=/home \
	  --deldoc --deldesc --delspec

llvm-inst: llvm-build
	$(info .. Installing patched LLVM/Clang to $(SANCUS_INSTALL_PREFIX))
	cd llvm/build && $(SUDO) $(MAKE) install

